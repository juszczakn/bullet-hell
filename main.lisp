(in-package :bullet-hell)

(defvar *frame-width* 500)
(defvar *frame-height* 500)

(defvar *player* (make-instance 'player :size 20 :x 100 :y 100))
(defvar *bullets* nil)
(defvar *enemies* nil)
(defvar *stars* (loop for i from 0 to 100 collect
                     (make-instance 'overlay :x (random 800) :y (random 600) :size 1)))

(defun draw-enemies ()
  (gl:begin :triangles)
  (gl:color 1 0 0)
  (gl:vertex 0 0)
  (gl:vertex 400 600)
  (gl:vertex 800 0)
  (gl:end))

(defun deg-to-rad (deg)
  (let ((m (/ deg 180)))
    (* m pi)))

(defun draw-circle (x y size sides)
  (gl:begin :line-loop)
  (let ((elts (loop for i from 0 to (/ 360 sides) collect i)))
    (dolist (elt elts)
      (let ((heading (deg-to-rad (* sides elt))))
        (gl:vertex (+ x (* size (cos heading))) (+ y (* size (sin heading)))))))
  (gl:end))

(defun draw-player ()
  ;(incf (x *player*) dx)
  ;(incf (y *player*) dy)
  (gl:color 0 0 1)
  (draw-circle (x *player*) (y *player*) (size *player*) 20))

(defun draw-stars ()
  (gl:color 1 1 1)
  (loop for star in *stars* do
       (draw-circle (x star) (y star) (size star) 20)))

(defun ai-move ()
  (loop for star in *stars* do
       (incf (x star))
       (incf (y star)))
  (draw-stars))

(defun start-window ()
  (sdl2:with-init (:everything)
    (sdl2:with-window (win :flags '(:shown :opengl))
      (sdl2:with-gl-context (gl-context win)
        (let ((controllers ())
              (counter 0))
          (sdl2:gl-make-current win gl-context)
          (gl:viewport 0 0 800 600)
          (gl:matrix-mode :projection)
          (gl:ortho 0 800 0 600 -1 1)
          (gl:matrix-mode :modelview)
          (gl:load-identity)
          (gl:clear-color 0 0 0 1)
          ;(sdl2:add-timer 1000 #'ai-move nil)
          (sdl2:with-event-loop (:method :poll)
            (:keydown
             (:keysym keysym)
             (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-w)
               (incf (y *player*) 10))
             (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-s)
               (incf (y *player*) -10))
             (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-a)
               (incf (x *player*) -10))
             (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-d)
               (incf (x *player*) 10)))
            (:keyup
             (:keysym keysym)
             (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)
               (sdl2:push-event :quit)))
            (:idle
             ()
             (gl:clear :color-buffer)
             (draw-player)
             (draw-stars)
             (gl:flush)
             (sdl2:gl-swap-window win))
            (:quit () t)))))))
